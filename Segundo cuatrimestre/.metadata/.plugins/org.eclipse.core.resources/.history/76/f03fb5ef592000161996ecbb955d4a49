package usuario.capadepresentacion.controlador;

import usuario.capadenegocio.logica.Usuarios;
import usuario.capadenegocio.transferencia.TransferID;
import usuario.capadepresentacion.vista.VistaActividad;
import usuario.capadepresentacion.vista.VistaActividadListener;
import usuario.capadepresentacion.vista.VistaAniadirUsuarioListener;
import usuario.capadepresentacion.vista.VistaEliminarUsuarioListener;
import usuario.capadepresentacion.vista.VistaLoginUsuario;
import usuario.capadepresentacion.vista.VistaLoginUsuarioListener;
import empleado.capadenegocio.logica.ImplementacionEmpleados;
import empleado.capadepresentacion.controlador.Controlador;
import empleado.capadepresentacion.controlador.FactoriaVistas;
import empleado.capadepresentacion.vista.VistaGenerica;

public class ControladorUsuario implements VistaActividadListener,
		VistaAniadirUsuarioListener, VistaEliminarUsuarioListener,
		VistaLoginUsuarioListener {

	private Usuarios servicioAplicacionUsuarios;
	private FactoriaVistasUsuario factoria;
	private Controlador controlerEmpleados;

	public ControladorUsuario(Usuarios sua, FactoriaVistasUsuario factUser,
			ImplementacionEmpleados imP, FactoriaVistas fact) {
		this.servicioAplicacionUsuarios = sua;
		this.factoria = factUser;
		controlerEmpleados = new Controlador(imP, fact);
	}

	@Override
	public void inicioSesion() {
		VistaLoginUsuario vista = factoria.vistaLoginUsuario(this);
		vista.mostrarVista();
		if (servicioAplicacionUsuarios.comprobarContrasenia(vista.getNombre(),
				vista.getContrasenia())) {
			TransferID user = new TransferID(vista.getNombre(),
					vista.getContrasenia());
			servicioAplicacionUsuarios.log(user);
			VistaActividad vista2 = factoria.vistaActividad(this);
			vista.ocultarVista();
			vista2.mostrarVista();
		} else {
			// Tratar error
		}
	}

	@Override
	public void aniadir() {
		
	}
	
	@Override
	public void eliminar() {

	}

	@Override
	public void descartar() {

	}

	@Override
	public void aniadirUsuario() {
		aniadir();
	}

	@Override
	public void eliminarUsuario() {
		
	}

	@Override
	public void accesoEmpleados() {
		controlerEmpleados.lanzar();
	}

	private void ocultarUltimaVista() {
		if (!vistasPresentadas.isEmpty()) {
			VistaGenerica vista = vistasPresentadas.pop();
			vista.ocultarVista();
		}
	}

	@Override
	public void BotonRetrocesoPulsado() {
		// TODO Apéndice de método generado automáticamente

	}

}
