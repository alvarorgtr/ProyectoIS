package usuario.capadenegocio.logica;

import usuario.capadeintegracion.DAOUsuariosImp;
import usuario.capadenegocio.reglas.Conserje;
import usuario.capadenegocio.reglas.TipoPermiso;
import usuario.capadenegocio.reglas.Usuario;
import usuario.capadenegocio.transferencia.TransferID;
import usuario.capadenegocio.transferencia.TransferNombre;
import usuario.capadenegocio.transferencia.TransferUsuario;

public class UsuariosImp implements Usuarios{

	@Override
	public void aniadirUsuario(TransferUsuario us) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		canal.aniadirUsuario(us);
	}

	@Override
	public void eliminarUsuario(TransferNombre nombre) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		canal.eliminarUsuario(nombre);
	}

	@Override
	public boolean log(TransferID us) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		return canal.logging(us);
	}

	@Override
	public boolean userYaExiste(String nombre) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		TransferNombre us = new TransferNombre(nombre);
		return canal.yaExiste(us);
	}

	@Override
	public boolean comprobarContrasenia(String nombre, String contra) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		TransferNombre us = new TransferNombre(nombre);
		String contrasenia = canal.comprobarContra(us);
		if (contrasenia.equals(contra)) return true;
		else return false; 
	}

	@Override
	public boolean comprobarPermiso(String nombre, TipoPermiso permisoNecesario) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		TransferNombre us = new TransferNombre(nombre);
		TipoPermiso permiso = canal.comprobarPerm(us);
		if (permiso.equals(permisoNecesario)) return true;
		else return false; 
	}

	@Override
	public Usuario consultarUsuario(TransferNombre nom) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		return canal.encontrarUsuario(nom);
	}

	@Override
	public void descartar(TransferUsuario user) {
		DAOUsuariosImp canal = DAOUsuariosImp.getInstance();
		canal.descartarCambio(user);
	}

}
